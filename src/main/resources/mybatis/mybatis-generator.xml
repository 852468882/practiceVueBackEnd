<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>
    <!--
        context:生成一组对象的环境
        id:必选，上下文id，用于在生成错误时提示
        defaultModelType:指定生成对象的样式
            1，conditional：默认值，类似hierarchical；
            2，flat：所有内容（主键，blob）等全部生成在一个对象中；
            3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
            1，MyBatis3：默认值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
            2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
        introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <context id="mysql" defaultModelType="flat" targetRuntime="MyBatis3Simple" >
        <property name="javaFileEncoding" value="UTF-8"/>
        <property name="useMapperCommentGenerator" value="true"/>

        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>
            <property name="caseSensitive" value="true"/>
            <property name="autoDelimitKeywords" value="true"/>
            <property name="beginningDelimiter" value="`"/>
            <property name="endingDelimiter" value="`"/>
            <property name="lombok" value="Data"/>
        </plugin>

        <!-- 必须要有的，使用这个配置链接数据库 -->
        <jdbcConnection
                driverClass="com.mysql.jdbc.Driver"
                connectionURL="jdbc:mysql://localhost:3306/vue_shop"
                userId="root"
                password="59864747">
        </jdbcConnection>

        <!-- java类型处理器
            用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
            注意一点，默认会先尝试使用Integer，Long，Short等来对应 DECIMAL 和 NUMERIC 数据类型；-->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!--
                true：使用BigDecimal对应数据库的 DECIMAL 和 NUMERIC 数据类型
                false：默认,
                    精度>0 || 长度>18：使用java.math.BigDecimal
                    精度=0 && 长度[10,18]：使用java.lang.Long
                    精度=0 && 长度[5,9]：使用java.lang.Integer
                    精度=0 && 长度<5：使用java.lang.Short
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <javaModelGenerator targetPackage="com.example.practicevue.entity" targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>

            <!-- 设置一个根对象，如果设置，需要使用类的全限定名称。
                如果设置了这个根对象，那么生成的实体类会继承这个类；一般几张表里都有共同的属性时设置
                注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：
                    属性名相同；属性类型相同；属性有相同的getter/setter方法；
             -->
            <!--<property name="rootClass" value="com.example.demo.entity.BaseEntity"/>-->
        </javaModelGenerator>

        <!-- 生成SQL map的XML文件生成器，
            注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
                或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
            targetPackage/targetProject:同javaModelGenerator -->
        <sqlMapGenerator targetPackage="mybatis.mapper" targetProject="src/main/resources">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- 生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
            targetPackage/targetProject:同javaModelGenerator
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator targetPackage="com.example.practicevue.mapper" type="XMLMAPPER" targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>

            <!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查 -->
            <!--<property name="rootInterface" value=""/>-->
        </javaClientGenerator>


        <!--<table tableName="sp_goods_pics" domainObjectName="GoodsPics">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
        <table tableName="sp_order" domainObjectName="Order">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
        <table tableName="sp_order_goods" domainObjectName="OrderGoods">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
        <table tableName="sp_report_1" domainObjectName="ReportOne">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
        <table tableName="sp_report_2" domainObjectName="ReportTwo">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
        <table tableName="sp_report_3" domainObjectName="ReportThree">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
        <table tableName="sp_type" domainObjectName="Type">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
        <table tableName="sp_user_cart" domainObjectName="UserCart">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>-->
    </context>
</generatorConfiguration>